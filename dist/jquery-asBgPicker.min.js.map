{"version":3,"sources":["jquery-asBgPicker.es.js"],"names":["global","factory","define","amd","exports","require","mod","jQuery","jqueryAsBgPickerEs","this","_jquery","_classCallCheck","instance","Constructor","TypeError","_jquery2","obj","__esModule","default","_interopRequireDefault","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","DEFAULTS","namespace","skin","image","lang","repeat","defaultValue","values","tpl","position","size","attachment","process","value","JSON","stringify","parse","$","parseJSON","getThumbnalil","imageData","imageFormat","imageName","imagePath","match","search","select","onChange","STRINGS","en","placeholder","change","bgRepeat","bgPosition","bgAttach","bgSize","Repeat","options","init","_this","tplContent","replace","strings","$tplRepeat","$imageWrap","after","$repeat","$expand","find","$items","each","eq","data","set","bindEvent","found","removeClass","classes","active","addClass","$image","css","background-repeat","that","on","disabled","_update","Size","_this2","$tplSize","$size","background-size","Position","_this3","$tplPosition","$position","background-position","Attachment","_this4","$tplAttachment","$attachment","$dropdown","asDropdown","imitateSelect","background-attachment","asBgPicker","element","$element","extend","hover","empty","exist","expand","initialed","_trigger","_init","_createHtml","$wrap","val","disable","_bindEvent","$initiate","$info","$change","$remove","clear","$close","call","$infoImageName","eventType","_len","arguments","params","Array","_key","concat","trigger","NAMESPACE$1","onFunction","word","substring","toUpperCase","apply","imgName","text"],"mappings":"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","file":"jquery-asBgPicker.min.js","sourcesContent":["/**\n* jQuery asBgPicker v0.1.4\n* https://github.com/amazingSurge/jquery-asBgPicker\n*\n* Copyright (c) amazingSurge\n* Released under the LGPL-3.0 license\n*/\nimport $$1 from 'jquery';\n\n/* eslint no-empty-function: \"off\" */\n\nvar DEFAULTS = {\n  namespace: 'asBgPicker',\n  skin: null,\n  image: 'images/defaults.png',\n  lang: 'en',\n  repeat: {\n    defaultValue: 'repeat',\n    values: ['no-repeat', 'repeat', 'repeat-x', 'repeat-y'],\n    tpl: function() {\n      return '<div class=\"{{namespace}}-repeat\">' +\n        '<span class=\"{{namespace}}-repeat-title\">{{strings.bgRepeat}}</span>' +\n        '<ul class=\"{{namespace}}-repeat-content\">' +\n        '<li class=\"repeat_no-repeat\"></li>' +\n        '<li class=\"repeat_repeat\"></li>' +\n        '<li class=\"repeat_repeat-x\"></li>' +\n        '<li class=\"repeat_repeat-y\"></li>' +\n        '</ul>' +\n        '</div>';\n    }\n  },\n\n  position: {\n    defaultValue: 'top left',\n    values: ['top left', 'top center', 'top right', 'center left', 'center center', 'center right', 'bottom left', 'bottom center', 'bottom right'],\n    tpl: function() {\n      return '<div class=\"{{namespace}}-position\">' +\n        '<span class=\"{{namespace}}-position-title\">{{strings.bgPosition}}</span>' +\n        '<ul class=\"{{namespace}}-position-content\">' +\n        '<li class=\"postion_top-left\"></li>' +\n        '<li class=\"postion_top-center\"></li>' +\n        '<li class=\"postion_top-right\"></li>' +\n        '<li class=\"postion_center-left\"></li>' +\n        '<li class=\"postion_center-center\"></li>' +\n        '<li class=\"postion_center-right\"></li>' +\n        '<li class=\"postion_bottom-left\"></li>' +\n        '<li class=\"postion_bottom-center\"></li>' +\n        '<li class=\"postion_bottom-right\"></li>' +\n        '</ul>' +\n        '</div>';\n    }\n  },\n\n  size: {\n    defaultValue: 'auto',\n    values: ['auto', 'cover', 'contain', '100% 100%'],\n    tpl: function() {\n      return '<div class=\"{{namespace}}-size\">' +\n        '<span class=\"{{namespace}}-size-title\">{{strings.bgSize}}</span>' +\n        '<ul class=\"{{namespace}}-size-content\">' +\n        '<li class=\"size_adapt-auto\"></li>' +\n        '<li class=\"size_adapt-width\"></li>' +\n        '<li class=\"size_adapt-height\"></li>' +\n        '<li class=\"size_adapt-all\"></li>' +\n        '</ul>' +\n        '</div>';\n    }\n  },\n\n  attachment: {\n    namespace: 'asDropdown',\n    defaultValue: 'scroll',\n    values: ['scroll', 'fixed', 'inherit'],\n    tpl: function() {\n      return '<div class=\"{{namespace}}-attachment\">' +\n        '<span class=\"{{namespace}}-attachment-title\">{{strings.bgAttach}}</span>' +\n        '<div class=\"{{namespace}}-attachment-content\">' +\n        '<div class=\"{{attachNamespace}} {{namespace}}-dropdown-trigger\"><i class=\"asIcon-caret-down\"></i></div>' +\n        '<ul>' +\n        '<li class=\"attachment_scroll\">scroll</li>' +\n        '<li class=\"attachment_fixed\">fixed</li>' +\n        '<li class=\"attachment_default\">default</li>' +\n        '</ul>' +\n        '</div>' +\n        '</div>';\n    }\n  },\n\n  tpl: function() {\n    return '<div class=\"{{namespace}}\">' +\n      '<div class=\"{{namespace}}-initiate\">' +\n      '<i></i>{{strings.placeholder}}' +\n      '</div>' +\n      '<div class=\"{{namespace}}-info\">' +\n      '<div class=\"{{namespace}}-info-image\">' +\n      '<i></i><span class=\"{{namespace}}-info-image-name\">{{strings.placeholder}}</span>' +\n      '</div>' +\n      '<div class=\"{{namespace}}-info-change\">{{strings.change}}</div>' +\n      '<a class=\"{{namespace}}-info-remove\" href=\"\"></a>' +\n      '</div>' +\n      '<div class=\"{{namespace}}-expand\">' +\n      '<a class=\"{{namespace}}-expand-close\" href=\"#\"></a>' +\n      '<div class=\"{{namespace}}-expand-image-wrap\">' +\n      '<div class=\"{{namespace}}-expand-image\"></div>' +\n      '</div>' +\n      '</div>' +\n      '</div>';\n  },\n\n  process: function(value) {\n    'use strict';\n    if (value && typeof value.image !== 'undefined' && value.image !== '') {\n      return JSON.stringify(value);\n    }\n    return '';\n  },\n\n  parse: function(value) {\n    'use strict';\n    if (value) {\n      return $.parseJSON(value);\n    }\n    return {};\n  },\n\n  getThumbnalil: function(image) {\n    'use strict';\n    let imageData, imageFormat, imageName, imagePath;\n\n    imageData = image.match(/([\\S]+[\\/])([\\S]+)(\\.+\\w+$)/i);\n    imagePath = imageData[1];\n    imageName = imageData[2];\n    imageFormat = imageData[3];\n\n    if (imageName.search('thumbnail') === 0) {\n      return imagePath + imageName + imageFormat;\n    }\n    return `${imagePath}thumbnail-${imageName}${imageFormat}`;\n  },\n  select: function() {},\n  onChange: function() {}\n};\n\nvar STRINGS = {\n  en: {\n    placeholder: 'Add Image',\n    change: 'change',\n    bgRepeat: 'Repeat',\n    bgPosition: 'Position',\n    bgAttach: 'Attach',\n    bgSize: 'Scalling'\n  }\n};\n\nclass Repeat {\n  constructor(instance) {\n    this.instance = instance;\n    this.values = instance.options.repeat.values;\n    this.defaultValue = instance.options.repeat.defaultValue;\n\n    this.init();\n  }\n\n  init() {\n    const tplContent = this.instance.options.repeat.tpl().replace(/\\{\\{namespace\\}\\}/g, this.instance.namespace)\n      .replace(/\\{\\{strings.bgRepeat\\}\\}/g, this.instance.strings.bgRepeat);\n    this.$tplRepeat = $(tplContent);\n    this.instance.$imageWrap.after(this.$tplRepeat);\n\n    this.$repeat = this.instance.$expand.find(`.${this.instance.namespace}-repeat`);\n    this.$items = this.$repeat.find('li');\n\n    $.each(this.values, (key, value) => {\n      this.$items.eq(key).data('repeat', value);\n    });\n\n    const value = typeof this.instance.value.repeat !== 'undefined' ? this.instance.value.repeat : this.defaultValue;\n    this.set(value);\n\n    this.bindEvent();\n  }\n\n  set(value) {\n    let found = false;\n    this.$items.removeClass(this.instance.classes.active);\n    for (let i = 0; i < this.values.length; i++) {\n      if (value === this.values[i]) {\n        this.instance.value.repeat = value;\n        this.$items.eq(i).addClass(this.instance.classes.active);\n        this.instance.$image.css({\n          'background-repeat': value\n        });\n        found = true;\n      }\n    }\n    if (!found) {\n      this.set(this.defaultValue);\n    }\n  }\n\n  clear() {\n    this.set(this.defaultValue);\n  }\n\n  bindEvent() {\n    const that = this;\n    this.$repeat.on('click', 'li', function() {\n      if (that.instance.disabled) {\n        return;\n      }\n      const value = $(this).data('repeat');\n      that.set(value);\n      that.instance._update();\n      return false;\n    });\n  }\n}\n\nclass Size {\n  constructor(instance) {\n    this.instance = instance;\n    this.values = instance.options.size.values;\n    this.defaultValue = instance.options.size.defaultValue;\n\n    this.init();\n  }\n\n  init() {\n    const tplContent = this.instance.options.size.tpl().replace(/\\{\\{namespace\\}\\}/g, this.instance.namespace)\n      .replace(/\\{\\{strings.bgSize\\}\\}/g, this.instance.strings.bgSize);\n    this.$tplSize = $(tplContent);\n    this.instance.$imageWrap.after(this.$tplSize);\n\n    this.$size = this.instance.$expand.find(`.${this.instance.namespace}-size`);\n    this.$items = this.$size.find('li');\n\n    $.each(this.values, (key, value) => {\n      this.$items.eq(key).data('size', value);\n    });\n\n    const value = typeof this.instance.value.size !== 'undefined' ? this.instance.value.size : this.defaultValue;\n    this.set(value);\n\n    this.bindEvent();\n  }\n\n  set(value) {\n    let found = false;\n    this.$items.removeClass(this.instance.classes.active);\n    for (let i = 0; i < this.values.length; i++) {\n      if (value === this.values[i]) {\n        this.instance.value.size = value;\n        this.$items.eq(i).addClass(this.instance.classes.active);\n        this.instance.$image.css({\n          'background-size': value\n        });\n        found = true;\n      }\n    }\n    if (!found) {\n      this.set(this.defaultValue);\n    }\n  }\n\n  clear() {\n    this.set(this.defaultValue);\n  }\n\n  bindEvent() {\n    const that = this;\n    this.$size.on('click', 'li', function() {\n      if (that.instance.disabled) {\n        return;\n      }\n      const value = $(this).data('size');\n      that.set(value);\n      that.instance._update();\n      return false;\n    });\n  }\n}\n\nclass Position {\n  constructor(instance) {\n    this.instance = instance;\n    this.values = instance.options.position.values;\n    this.defaultValue = instance.options.position.defaultValue;\n\n    this.init();\n  }\n\n  init() {\n    const tplContent = this.instance.options.position.tpl().replace(/\\{\\{namespace\\}\\}/g, this.instance.namespace)\n      .replace(/\\{\\{strings.bgPosition\\}\\}/g, this.instance.strings.bgPosition);\n    this.$tplPosition = $(tplContent);\n    this.instance.$imageWrap.after(this.$tplPosition);\n\n    this.$position = this.instance.$expand.find(`.${this.instance.namespace}-position`);\n    this.$items = this.$position.find('li');\n\n    $.each(this.values, (key, value) => {\n      this.$items.eq(key).data('position', value);\n    });\n\n    const value = typeof this.instance.value.position !== 'undefined' ? this.instance.value.position : this.defaultValue;\n    this.set(value);\n\n    this.bindEvent();\n  }\n\n  set(value) {\n    let found = false;\n    this.$items.removeClass(this.instance.classes.active);\n    for (let i = 0; i < this.values.length; i++) {\n      if (value === this.values[i]) {\n        this.instance.value.position = value;\n        this.$items.eq(i).addClass(this.instance.classes.active);\n        this.instance.$image.css({\n          'background-position': value\n        });\n        found = true;\n      }\n    }\n\n    if (!found) {\n      this.set(this.defaultValue);\n    }\n  }\n\n  clear() {\n    this.set(this.defaultValue);\n  }\n\n  bindEvent() {\n    const that = this;\n    this.$position.on('click', 'li', function() {\n      if (that.instance.disabled) {\n        return;\n      }\n      const value = $(this).data('position');\n      that.set(value);\n      that.instance._update();\n      return false;\n    });\n  }\n}\n\nclass Attachment {\n  constructor(instance) {\n    this.instance = instance;\n    this.values = instance.options.attachment.values;\n    this.defaultValue = instance.options.attachment.defaultValue;\n\n    this.init();\n  }\n\n  init() {\n    const tplContent = this.instance.options.attachment.tpl().replace(/\\{\\{attachNamespace\\}\\}/g, this.instance.options.attachment.namespace)\n      .replace(/\\{\\{namespace\\}\\}/g, this.instance.namespace)\n      .replace(/\\{\\{strings.bgAttach\\}\\}/g, this.instance.strings.bgAttach);\n    this.$tplAttachment = $(tplContent);\n    this.instance.$imageWrap.after(this.$tplAttachment);\n\n    this.$attachment = this.instance.$expand.find(`.${this.instance.namespace}-attachment`);\n    this.$items = this.$attachment.find('li');\n    this.$dropdown = this.instance.$expand.find(`.${this.instance.options.attachment.namespace}`);\n    this.values = this.instance.options.attachment.values;\n\n    $.each(this.values, (key, value) => {\n      this.$items.eq(key).data('attachment', value);\n    });\n\n    const that = this;\n\n    this.$dropdown.asDropdown({\n      namespace: this.instance.options.attachment.namespace,\n      imitateSelect: true,\n      data: 'attachment',\n      // select: this.instance.attachment,\n      onChange(value) {\n        if (that.instance.disabled) {\n          return;\n        }\n        that.instance.value.attachment = value;\n        that.instance._update();\n        that.instance.$image.css({\n          'background-attachment': that.instance.value.attachment\n        });\n      }\n    });\n\n    const value = typeof this.instance.value.attachment !== 'undefined' ? this.instance.value.attachment : this.defaultValue;\n    this.set(value);\n  }\n\n  set(value) {\n    let found = false;\n    this.$items.removeClass(this.instance.classes.active);\n    for (let i = 0; i < this.values.length; i++) {\n      if (value === this.values[i]) {\n        this.$dropdown.data('asDropdown').set(value);\n        found = true;\n      }\n    }\n\n    if (!found) {\n      this.set(this.defaultValue);\n    }\n  }\n\n  clear() {\n    this.set(this.defaultValue);\n  }\n}\n\nconst NAMESPACE$1 = 'asBgPicker';\n\n// main constructor\nclass asBgPicker {\n  constructor(element, options) {\n    this.element = element;\n    this.$element = $$1(element);\n\n    this.options = $$1.extend(true, {}, DEFAULTS, options, this.$element.data());\n\n    // load lang strings\n    if (typeof STRINGS[this.options.lang] === 'undefined') {\n      this.lang = 'en';\n    } else {\n      this.lang = this.options.lang;\n    }\n\n    this.strings = STRINGS[this.lang];\n\n    this.namespace = this.options.namespace;\n\n    // public properties\n    this.classes = {\n      // status\n      skin: `${this.namespace}_${this.options.skin}`,\n      disabled: `${this.namespace}_disabled`,\n      active: `${this.namespace}_active`,\n      hover: `${this.namespace}_hover`,\n      empty: `${this.namespace}_empty`,\n      exist: `${this.namespace}_exist`,\n      expand: `${this.namespace}_expand`\n    };\n\n    this.$element.addClass(`${this.namespace}-input`);\n    // flag\n    this.disabled = false;\n    this.initialed = false;\n\n    this._trigger('init');\n    this._init();\n  }\n\n  _init() {\n    this._createHtml();\n\n    if (this.options.skin) {\n      this.$wrap.addClass(this.classes.skin);\n    }\n\n    this.value = this.options.parse(this.$element.val());\n\n    this.set(this.value, false);\n\n    if (this.options.disabled) {\n      this.disable();\n    }\n    // init\n    if (!this.value.image) {\n      this.$wrap.addClass(this.classes.empty);\n    }\n\n    this.size = new Size(this);\n    this.attachment = new Attachment(this);\n    this.position = new Position(this);\n    this.repeat = new Repeat(this);\n\n    this.$wrap.addClass(this.classes.exist);\n\n    this._bindEvent();\n\n    this.initialed = true;\n    // after init end trigger 'ready'\n    this._trigger('ready');\n  }\n\n  _bindEvent() {\n    const that = this;\n    this.$initiate.on('click', () => {\n      if (that.disabled) {\n        return;\n      }\n\n      that.$wrap.addClass(that.classes.expand).removeClass(that.classes.exist);\n    });\n\n    this.$info.on('mouseenter', function() {\n      if (that.disabled) {\n        return;\n      }\n\n      $$1(this).addClass(that.classes.hover);\n    }).on('mouseleave', function() {\n      if (that.disabled) {\n        return;\n      }\n\n      $$1(this).removeClass(that.classes.hover);\n    });\n\n    this.$change.on('click', () => {\n      if (that.disabled) {\n        return;\n      }\n\n      that.$wrap.addClass(that.classes.expand).removeClass(that.classes.exist);\n    });\n\n    this.$remove.on('click', () => {\n      if (that.disabled) {\n        return;\n      }\n\n      that.clear();\n\n      return false;\n    });\n\n    this.$close.on('click', () => {\n      if (that.disabled) {\n        return;\n      }\n\n      that.$wrap.addClass(that.classes.exist).removeClass(that.classes.expand);\n      return false;\n    });\n\n    this.$image.on('click', () => {\n      if (that.disabled) {\n        return;\n      }\n\n      that.options.select.call(that);\n    });\n  }\n\n  _createHtml() {\n    this.$wrap = $$1(this.options.tpl().replace(/\\{\\{namespace\\}\\}/g, this.namespace)\n      .replace(/\\{\\{strings.placeholder\\}\\}/g, this.strings.placeholder)\n      .replace(/\\{\\{strings.change\\}\\}/g, this.strings.change));\n    this.$element.after(this.$wrap);\n\n    this.$initiate = $$1(`.${this.namespace}-initiate`, this.$wrap);\n\n    this.$info = $$1(`.${this.namespace}-info`, this.$wrap);\n    this.$infoImageName = $$1(`.${this.namespace}-info-image-name`, this.$info);\n    this.$remove = $$1(`.${this.namespace}-info-remove`, this.$info);\n    this.$change = $$1(`.${this.namespace}-info-change`, this.$info);\n\n    this.$expand = $$1(`.${this.namespace}-expand`, this.$wrap);\n    this.$close = $$1(`.${this.namespace}-expand-close`, this.$expand);\n    this.$imageWrap = $$1(`.${this.namespace}-expand-image-wrap`, this.$expand);\n    this.$image = $$1(`.${this.namespace}-expand-image`, this.$expand);\n  }\n\n  _trigger(eventType, ...params) {\n    const data = [this].concat(params);\n\n    // event\n    this.$element.trigger(`${NAMESPACE$1}::${eventType}`, data);\n\n    // callback\n    eventType = eventType.replace(/\\b\\w+\\b/g, (word) => {\n      return word.substring(0, 1).toUpperCase() + word.substring(1);\n    });\n    const onFunction = `on${eventType}`;\n\n    if (typeof this.options[onFunction] === 'function') {\n      this.options[onFunction].apply(this, params);\n    }\n  }\n\n  _setState(image) {\n    if (!image || image === this.options.image) {\n      this.$wrap.addClass(this.classes.empty);\n    } else {\n      this.$wrap.removeClass(this.classes.empty);\n    }\n  }\n\n  _returnInfo(image) {\n    let imgName;\n    if (!image || image === this.options.image) {\n      this.$infoImageName.text(this.strings.placeholder);\n    } else {\n      imgName = image.match(/([\\S]+[\\/])([\\S]+\\w+$)/i)[2];\n      this.$infoImageName.text(imgName);\n    }\n  }\n\n  _update() {\n    if (this.value === null) {\n      this.value = {};\n    }\n\n    this.$element.val(this.val());\n    this._trigger('change', this.options.parse(this.val()));\n  }\n\n  val(value) {\n    if (typeof value === 'undefined') {\n      return this.options.process(this.value);\n    }\n\n    const valueObj = this.options.parse(value);\n\n    if (valueObj) {\n      this.set(valueObj);\n    } else {\n      this.clear();\n    }\n  }\n\n  set(value, update) {\n    this.value = value;\n\n    this.setImage(value.image);\n\n    if (update !== false) {\n      if (typeof value.repeat !== 'undefined') {\n        this.repeat.set(value.repeat);\n      } else {\n        this.repeat.clear();\n      }\n      if (typeof value.size !== 'undefined') {\n        this.size.set(value.size);\n      } else {\n        this.size.clear();\n      }\n      if (typeof value.position !== 'undefined') {\n        this.position.set(value.position);\n      } else {\n        this.position.clear();\n      }\n      if (typeof value.attachment !== 'undefined') {\n        this.attachment.set(value.attachment);\n      } else {\n        this.attachment.clear();\n      }\n\n      this._update();\n    }\n  }\n\n  clear(update) {\n    this.value = {};\n\n    if (update !== false) {\n      const image = '';\n      this.setImage(image);\n\n      this.repeat.clear();\n      this.size.clear();\n      this.position.clear();\n      this.attachment.clear();\n      this._update();\n    }\n  }\n\n  setImage(image) {\n    let thumbnailUrl;\n    const that = this;\n    this._setState(image);\n    this._returnInfo(image);\n    if (image === '' || typeof image === 'undefined') {\n      this.$image.css({\n        'background-image': 'none'\n      });\n    } else if (image || image !== this.options.image) {\n      thumbnailUrl = this.options.getThumbnalil(image);\n      const img = new Image();\n      img.onload = () => {\n        that.value.image = thumbnailUrl;\n        that._returnInfo(that.value.image);\n        that.$image.css({\n          'background-image': `url('${that.value.image}')`\n        });\n      };\n      img.onerror = () => {\n        that.value.image = image;\n        that._returnInfo(image);\n        that._update();\n        that.$image.css({\n          'background-image': 'none'\n        });\n      };\n      img.src = thumbnailUrl;\n    }\n  }\n\n  setRepeat(repeat) {\n    this.repeat.set(repeat);\n    this._update();\n  }\n\n  setSize(size) {\n    this.size.set(size);\n    this._update();\n  }\n\n  setPosition(position) {\n    this.position.set(position);\n    this._update();\n  }\n\n  setAttachment(attachment) {\n    this.attachment.set(attachment);\n    this._update();\n  }\n\n  get() {\n    return this.value;\n  }\n\n  enable() {\n    this.disabled = false;\n    this.$wrap.removeClass(this.classes.disabled);\n  }\n\n  disable() {\n    this.disabled = true;\n    this.$wrap.addClass(this.classes.disabled);\n  }\n\n  destroy() {\n    this.$element.data(NAMESPACE$1, null);\n    this.$wrap.remove();\n    this._trigger('destroy');\n  }\n\n  static localize(lang, labels) {\n    STRINGS[lang] = labels;\n  }\n\n  static setDefaults(options) {\n    $$1.extend(true, DEFAULTS, $$1.isPlainObject(options) && options);\n  }\n}\n\nvar info = {\n  version:'0.1.4'\n};\n\nconst NAMESPACE = 'asBgPicker';\nconst OtherAsBgPicker = $$1.fn.asBgPicker;\n\nconst jQueryAsBgPicker = function(options, ...args) {\n  if (typeof options === 'string') {\n    const method = options;\n\n    if (/^_/.test(method)) {\n      return false;\n    } else if ((/^(get)$/.test(method)) || (method === 'val' && args.length === 0)) {\n      const instance = this.first().data(NAMESPACE);\n      if (instance && typeof instance[method] === 'function') {\n        return instance[method](...args);\n      }\n    } else {\n      return this.each(function() {\n        const instance = $$1.data(this, NAMESPACE);\n        if (instance && typeof instance[method] === 'function') {\n          instance[method](...args);\n        }\n      });\n    }\n  }\n\n  return this.each(function() {\n    if (!$$1(this).data(NAMESPACE)) {\n      $$1(this).data(NAMESPACE, new asBgPicker(this, options));\n    }\n  });\n};\n\n$$1.fn.asBgPicker = jQueryAsBgPicker;\n\n$$1.asBgPicker = $$1.extend({\n  setDefaults: asBgPicker.setDefaults,\n  localize: asBgPicker.localize,\n  noConflict: function() {\n    $$1.fn.asBgPicker = OtherAsBgPicker;\n    return jQueryAsBgPicker;\n  }\n}, info);\n"]}